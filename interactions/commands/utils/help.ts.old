import {ContextMenuCommandBuilder, EmbedBuilder, SlashCommandBuilder} from 'discord.js';
import {Command, CommandBase, SubCommand} from '../../../interface/command';
import {readdirSync} from 'node:fs';

let dirsCategory = readdirSync('./interactions/commands/').filter((file) => !file.includes('.'));
dirsCategory.push('../commands');

// noinspection JSUnusedGlobalSymbols
export default {
    command: new SlashCommandBuilder()
        .setName('help')
        .setDescription('Renvoie le ping du bot.')
        .addStringOption(option =>
            option
                .setName('commande')
                .setDescription('La commande √† afficher')
                .setRequired(false)
                .setAutocomplete(true)
        ),
    run: async (client, interaction) => {
        const cmdName = interaction.options.getString('commande');
        const isAdmin = client.config.admin.includes(interaction.user.id);

        const commands: CommandBase[] = client.commands.filter((c) => !(c.command instanceof ContextMenuCommandBuilder)) as unknown as CommandBase[];
        const categories = [...new Set(commands.map((cmd: any) => <string>(cmd as CommandBase).data.category))].filter(c => client.config.adminCategory.includes(c) ? isAdmin : true);
        let res = '';
        if (!cmdName) {
            res = categories.map((cat) => {
                const cmd = commands.filter((c) => c.data.category === cat).map((c) => `\`${c.command.name}\``).join(', ');
                return `**${cat.charAt(0).toUpperCase() + cat.slice(1)}**\n${cmd}`;
            }).join('\n\n');
        } else if ((commands.find((c) => c.command.name === cmdName) as SubCommand).data.subCommand) {
            const cmd: SubCommand = commands.find((c) => c.command.name === cmdName) as SubCommand;
            res = `**${cmd.command.name}**\n${cmd.command.description}\n\n`;
            res += `**Sous-commandes**\n${(cmd as SubCommand).command.options.map((sub) => `\`${sub.toJSON().name}\``).join(', ')}\n\n`;
        } else {
            const cmd = commands.find((c) => c.command.name === cmdName);
            if (!cmd) return interaction.reply({
                content: 'Commande non trouv√©e !',
                ephemeral: true
            });


            res = `**${cmd.command.name}**\n${cmd.command.description}\n\n`;
            const typeOpt: Record<number, string | undefined> = {
                6: '@',
                7: '#',
                8: '@',
                11: '[A]'
            };
            res += `**Usage**\n\`/${cmd.command.name}${cmd.command.options ? ' ' + cmd.command.options.map((opt) => opt.toJSON().required ? `<${typeOpt[<number>opt.toJSON().type] || ''}${opt.toJSON().name}>` : `[${typeOpt[<number>opt.toJSON().type] ?? ''}${opt.toJSON().name}]`).join(' ') : ''}\`\n\n`;
            res += `**Raccourcis**\n</${cmd.command.name}:${client.application?.commands.cache.find((c) => c.name === cmd.command.name)?.id}>\n\n`;
        }

        if (interaction.replied) return;

        return interaction.reply({
            embeds: [new EmbedBuilder()
                .setTitle('üìö Liste des commandes')
                .setDescription('Voici la liste des commandes disponibles sur le bot.\n\n' + res)
            ],
            ephemeral: true
        });
    },
    runAutocomplete: async (client, interaction) => {
        const cmdName = interaction.options.getString('commande');
        const isAdmin = client.config.admin.includes(interaction.user.id);

        const commandList = (client.commands.filter((c) => !(c.command instanceof ContextMenuCommandBuilder)) as unknown as CommandBase[]).filter((c) => client.config.adminCategory.includes(c.data.category as string) ? isAdmin : true).map((c) => c.command.name);
        const res = !cmdName ? commandList.slice(0, 25) : commandList.filter((m: string) => m.startsWith(cmdName)).slice(0, 25);
        return interaction.respond(res.map((m: string) => {
            return {
                name: m,
                value: m
            };
        }));
    }
} as Command;